// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// new_model
SEXP new_model(std::vector< std::vector< unsigned int > >& annotations, std::vector< unsigned int >& geneid, std::vector< int >& parent, std::vector< bool >& duplication);
RcppExport SEXP _aphylo2_new_model(SEXP annotationsSEXP, SEXP geneidSEXP, SEXP parentSEXP, SEXP duplicationSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< std::vector< unsigned int > >& >::type annotations(annotationsSEXP);
    Rcpp::traits::input_parameter< std::vector< unsigned int >& >::type geneid(geneidSEXP);
    Rcpp::traits::input_parameter< std::vector< int >& >::type parent(parentSEXP);
    Rcpp::traits::input_parameter< std::vector< bool >& >::type duplication(duplicationSEXP);
    rcpp_result_gen = Rcpp::wrap(new_model(annotations, geneid, parent, duplication));
    return rcpp_result_gen;
END_RCPP
}
// init
int init(SEXP p);
RcppExport SEXP _aphylo2_init(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(init(p));
    return rcpp_result_gen;
END_RCPP
}
// likelihood
double likelihood(SEXP p, const std::vector< double >& par);
RcppExport SEXP _aphylo2_likelihood(SEXP pSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector< double >& >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood(p, par));
    return rcpp_result_gen;
END_RCPP
}
// get_probabilities
NumericMatrix get_probabilities(SEXP p);
RcppExport SEXP _aphylo2_get_probabilities(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(get_probabilities(p));
    return rcpp_result_gen;
END_RCPP
}
// get_sequence
std::vector< unsigned int > get_sequence(SEXP p);
RcppExport SEXP _aphylo2_get_sequence(SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sequence(p));
    return rcpp_result_gen;
END_RCPP
}
// sim_aphylo2
std::vector< std::vector< unsigned int > > sim_aphylo2(SEXP p, const std::vector<double>& par);
RcppExport SEXP _aphylo2_sim_aphylo2(SEXP pSEXP, SEXP parSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type par(parSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_aphylo2(p, par));
    return rcpp_result_gen;
END_RCPP
}
// term_gains
int term_gains(SEXP p, std::vector<unsigned int>& funs);
RcppExport SEXP _aphylo2_term_gains(SEXP pSEXP, SEXP funsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int>& >::type funs(funsSEXP);
    rcpp_result_gen = Rcpp::wrap(term_gains(p, funs));
    return rcpp_result_gen;
END_RCPP
}
// term_loss
int term_loss(SEXP p, std::vector<unsigned int>& funs);
RcppExport SEXP _aphylo2_term_loss(SEXP pSEXP, SEXP funsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< std::vector<unsigned int>& >::type funs(funsSEXP);
    rcpp_result_gen = Rcpp::wrap(term_loss(p, funs));
    return rcpp_result_gen;
END_RCPP
}
// term_cogain
int term_cogain(SEXP p, unsigned int a, unsigned int b);
RcppExport SEXP _aphylo2_term_cogain(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type a(aSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(term_cogain(p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// term_neofun
int term_neofun(SEXP p, unsigned int a, unsigned int b);
RcppExport SEXP _aphylo2_term_neofun(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type a(aSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(term_neofun(p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// term_subfun
int term_subfun(SEXP p, unsigned int a, unsigned int b);
RcppExport SEXP _aphylo2_term_subfun(SEXP pSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type a(aSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(term_subfun(p, a, b));
    return rcpp_result_gen;
END_RCPP
}
// term_maxfuns
int term_maxfuns(SEXP p, unsigned int lb, unsigned int ub);
RcppExport SEXP _aphylo2_term_maxfuns(SEXP pSEXP, SEXP lbSEXP, SEXP ubSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type p(pSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type lb(lbSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ub(ubSEXP);
    rcpp_result_gen = Rcpp::wrap(term_maxfuns(p, lb, ub));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_aphylo2_new_model", (DL_FUNC) &_aphylo2_new_model, 4},
    {"_aphylo2_init", (DL_FUNC) &_aphylo2_init, 1},
    {"_aphylo2_likelihood", (DL_FUNC) &_aphylo2_likelihood, 2},
    {"_aphylo2_get_probabilities", (DL_FUNC) &_aphylo2_get_probabilities, 1},
    {"_aphylo2_get_sequence", (DL_FUNC) &_aphylo2_get_sequence, 1},
    {"_aphylo2_sim_aphylo2", (DL_FUNC) &_aphylo2_sim_aphylo2, 2},
    {"_aphylo2_term_gains", (DL_FUNC) &_aphylo2_term_gains, 2},
    {"_aphylo2_term_loss", (DL_FUNC) &_aphylo2_term_loss, 2},
    {"_aphylo2_term_cogain", (DL_FUNC) &_aphylo2_term_cogain, 3},
    {"_aphylo2_term_neofun", (DL_FUNC) &_aphylo2_term_neofun, 3},
    {"_aphylo2_term_subfun", (DL_FUNC) &_aphylo2_term_subfun, 3},
    {"_aphylo2_term_maxfuns", (DL_FUNC) &_aphylo2_term_maxfuns, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_aphylo2(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
